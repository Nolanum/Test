# **Instruction dla works in git**

## Что такое  git?

git - это одна из реализаций осуществляющий контроль версий.

## Подготовка репозитория.

Чтобы создать (инициализировать) новый репозиторий в текущей папке нужно ввести в терминале команду:

    git init 

Для клонирования репозитория необходимо применить команду:

    git clone <адрес_репозитория>

## Задаем имя пользователя и адрес электронной почты.

Данная операция привязывает созданые комиты к имени и почте того человека который работал и позволяет отследить процесс создания:

    git config --global user.name "user name"

    git config --global user.email "user email"
 
Чтобы задать адрес электронной почты, который будет исполльзоваться для всех коммитов выполненых текущим пользователем, необходимо применить команду:

    git config --local user.email "user email"
   
## Добавление файлов в репозиторий.

Чтобы добавить файл необходимо ввести команду:

    git add имя_файла.тип_файла

## Проверка статуса репозиториия.

Данная команда позволяет просмотреть статус нужного репозитория:

    git status

## Создание комитов.

Для созаниия комитов используется команда: 

    git commit

Для сохранения сообения при создании комита используется комадна:

    git commit -m "Текст описывающий внесенные, конкретные изменения в репозитории"

## Просмотр истории коммитов.

Для просмотра изменений внесенных в репозиторий применяется команда:

    git log 

Для менее детального и краткого просмотра изменений в репозитори используется команда:

    git log --oneline

Для выведение просмотра коммитов ввиде графа/дерева необходимо применить команду:

    git log --graph

Чтобы подробно изучить изменения внесенные в каждый коммит необходимо применить команду:

    git log -p

Чтобы огранчить число отображаемых коммитов можно использовать параметр:

    git log -n <limit>
    
## Создание новой ветки.

Для того чтобы создать новую ветку в репозитории необходимо применить команду: 

    git branch Новое_имя_ветки

Для перехода от одной ветки к другой необходимо применить команду:

    git checkout имя_нужной_ветки

## Просмотр списка веток.

Для просмотра списка имеющихся веток необходимо ввести команду: 

    git branch 

Так же возможно отобразить список и удаленных веток:

    git branch -a

## Слияние и удаление веток.

Перед тем как сливать ветки стоит обновить локальную ветку master, во избежания дальнейших проблем. Для этого применяется команда:

    git pull origin master

Для того чтобы объединить ветки необходимо применить команду:

    git merge Название ветки (ктороую необходимо добаить в ветку где вы находитесь)

Для удаления ветки необходимо применить команду:

    git branch -d Название_ветки

Для принудительного удаления ветки необходимо применить команду:

    git branch -D Название_ветки
    
Вышеуказанные команды удаляют только локальную копию ветки. Для того чтобы стереть удалённую ветку, необходимо выполнить следующую команду:

    git push origin --delete existing_branch_name

## Остановка слияния 

Для того чтобы оставновить слияние и вернуть прежнее состояние с которого данный процес был начат необходимо применить команду:

    git marge --abort

Чтобы востановаить конфликтующие файлы до начального состояния можно применить команду:

    git reset

Данная команда работает пока не выполнен коммит изменений, так как изменения в разделе проиндексированных файлов в рабочем каталоге.

## Подробный просмотр заданного коммита.

Для того чтобы просмотреть полный список изменений внесенных конкретным коммитом необходимо использовать команду:

    git show индификационный_номер_нужного_коммита 

## Удаление файлов или отмена действия

Для того чтобы удалить файлы которые еще не занесены и не сохранены в репозиторий необходимо применить команду:

    git clean
    
## Изменение и отмена 

Для того, чтобы отменить изменения внесенные в коммит и при этом не удолять его, а создать новый коммит с новым содержимым, необходимо применить команду:

    git revert

В результате, данной команды, история коммитов не теряется, что важно для сохранения истории версий и надежной совместной работы.

"Команда git revert — это операция для безопасной отмены изменений, действие которой направлено в будущее. Для отката изменений команда не удаляет из истории коммиты или родительские элементы, a создает новый коммит с отменой нужных действий. Использовать команду git revert безопаснее, потому что она не создает угрозу потери кода, в отличие от git reset."

### Создание нового удаленного репозитория

1. Создать аккаунт на Githab.com;
2. Нажать на вкладку "Repositories";
3. Нажать на зеленую кнопку "NEW";
4. В открывшейся вкладке Create a new repository создать имя репозитория и отметить все необходимые настройки;
5. Нажать на зеленую кнопку "Create repository";
6. Во вкладке Quick setup — if you’ve done this kind of thing before выбрать один из трех пунктов и следовать инструции;

### Отправка изменений в удаленный репозиторий

1. "Подружить" ваш локальный и удаленный репозиторий;
2. Отправить (git push) локальный репозиторий в удаленный (на Github), при этом возможно поандобаится авторизация на удаленном репозитории;
3. Провести изменения (с другого компьютера);
4. Выкачать (git pull) актуальное состояние из удаленного репозитория; 
